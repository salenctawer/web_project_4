"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*
/ /= ../../node_modules/jquery/dist/jquery.js
 */
var profileContainer = document.querySelector('.profile');
var formRename = document.querySelector('.form-rename');
var closeBtn = document.querySelectorAll('.close');
var formCard = document.querySelector('.form-card');

var saveInfo = function saveInfo(nameValue, descriptionValue) {
  profileContainer.querySelector('.profile-info__name').textContent = nameValue;
  profileContainer.querySelector('.profile-info__description').textContent = descriptionValue;
};

var openInfo = function openInfo(inputNameValue, inputDescriptionValue) {
  formRename.querySelector('#form-name').value = inputNameValue;
  formRename.querySelector('#form-description').value = inputDescriptionValue;
};

var closeFunction = function closeFunction() {
  var _iterator = _createForOfIteratorHelper(closeBtn),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var close = _step.value;
      close.addEventListener('click', function () {
        formRename.classList.remove('--active');
        formCard.classList.remove('--active');
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};

profileContainer.querySelector('.profile-info__button').addEventListener('click', function () {
  var nameInput = formRename.querySelector('#form-name');
  var descriptionInput = formRename.querySelector('#form-description');
  var nameProfile = profileContainer.querySelector('.profile-info__name');
  var descriptionProfile = profileContainer.querySelector('.profile-info__description');
  openInfo(nameProfile.textContent, descriptionProfile.textContent);
  formRename.classList.add('--active');
  closeFunction();
  formRename.addEventListener('submit', function (e) {
    e.preventDefault();
    saveInfo(nameInput.value, descriptionInput.value);
    formRename.classList.remove('--active');
  });
});
var initialCards = [{
  name: 'Lago di Braies',
  link: 'https://code.s3.yandex.net/web-code/lago.jpg'
}, {
  name: 'Vanoise National Park',
  link: 'https://code.s3.yandex.net/web-code/vanoise.jpg'
}, {
  name: 'Latemar',
  link: 'https://code.s3.yandex.net/web-code/latemar.jpg'
}, {
  name: 'Bald Mountains',
  link: 'https://code.s3.yandex.net/web-code/bald-mountains.jpg'
}, {
  name: 'Lake Louise',
  link: 'https://code.s3.yandex.net/web-code/lake-louise.jpg'
}, {
  name: 'Yosemite Valley',
  link: 'https://code.s3.yandex.net/web-code/yosemite.jpg'
}];

var addNewCard = function addNewCard(elementLink, elementName) {
  var cardTemplate = document.querySelector('#card-template').content;
  var cardElement = cardTemplate.querySelector('.grid-element').cloneNode(true);
  cardElement.querySelector('.grid-element__img').style.backgroundImage = 'url(' + elementLink + ')';
  cardElement.querySelector('.title').textContent = elementName;
  document.querySelector('.grid').prepend(cardElement);
  cardElement.querySelector('.grid-element__trash').addEventListener('click', function (e) {
    e.stopPropagation();
    e.target.parentNode.parentNode.parentNode.removeChild(e.target.parentNode.parentNode);
  });
  cardElement.querySelector('.grid-element__like').addEventListener('click', function (e) {
    e.target.classList.toggle('grid-element__like_active');
  });
};

var addCard = function addCard() {
  initialCards.forEach(function (element) {
    addNewCard(element.link, element.name);
  });
};

addCard();
profileContainer.querySelector('.add-button').addEventListener('click', function () {
  formCard.classList.add('--active');
  closeFunction();
});
formCard.addEventListener('submit', function (e) {
  var titleCard = formCard.querySelector('#card-title');
  var linkCard = formCard.querySelector('#card-link');
  addNewCard(linkCard.value, titleCard.value);
  e.preventDefault();
  formCard.classList.remove('--active');
});

var openPhoto = function openPhoto(photoLink, photoTitle) {
  var photoTemplate = document.querySelector('#photo-template').content;
  var photoContent = photoTemplate.querySelector('.photo-content').cloneNode(true);
  photoContent.querySelector('.photo-element__img').style.backgroundImage = photoLink;
  photoContent.querySelector('.photo-element__title').textContent = photoTitle;
  var closePhoto = photoContent.querySelector('.close');
  closePhoto.addEventListener('click', function () {
    closePhoto.parentNode.parentNode.parentNode.parentNode.parentNode.removeChild(closePhoto.parentNode.parentNode.parentNode.parentNode);
  });
  document.querySelector('.body').prepend(photoContent);
};

var clickPhoto = function clickPhoto() {
  var photoGrid = document.querySelectorAll('.grid-element__img');

  var _iterator2 = _createForOfIteratorHelper(photoGrid),
      _step2;

  try {
    var _loop = function _loop() {
      var photo = _step2.value;
      photo.addEventListener('click', function () {
        var srcContainer = photo.style.backgroundImage;
        var titleGrid = document.querySelector('.grid-element .title').textContent;
        openPhoto(srcContainer, titleGrid);
      });
    };

    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
};

clickPhoto(); // enableValidation({
//     formSelector: '.popup__form',
//     inputSelector: '.form__input',
//     submitButtonSelector: '.form__button',
//     inactiveButtonClass: 'form__button_disabled',
//     inputErrorClass: 'form__input_type_error',
//     errorClass: 'form__error_visible'
// }); 

var form = document.querySelector('.popup__form');
var formInput = form.querySelector('.form__input');
var formError = form.querySelector(".".concat(formInput.id, "-error"));

var showInputError = function showInputError(formElement, inputElement, errorMessage) {
  var errorElement = formElement.querySelector(".".concat(inputElement.id, "-error"));
  inputElement.classList.add('form__input_type_error');
  errorElement.textContent = errorMessage;
  errorElement.classList.add('form__input-error_active');
};

var hideInputError = function hideInputError(formElement, inputElement) {
  var errorElement = formElement.querySelector(".".concat(inputElement.id, "-error"));
  inputElement.classList.remove('form__input_type_error');
  errorElement.classList.remove('form__input-error_active');
  errorElement.textContent = '';
};

var checkInputValidity = function checkInputValidity(formElement, inputElement) {
  if (!inputElement.validity.valid) {
    showInputError(formElement, inputElement, inputElement.validationMessage);
  } else {
    hideInputError(formElement, inputElement);
  }
};

var setEventListeners = function setEventListeners(formElement) {
  var inputList = Array.from(formElement.querySelectorAll('.form__input'));
  inputList.forEach(function (inputElement) {
    inputElement.addEventListener('input', function () {
      checkInputValidity(formElement, inputElement);
    });
  });
};

var enableValidation = function enableValidation() {
  var formList = Array.from(document.querySelectorAll('.form'));
  formList.forEach(function (formElement) {
    formElement.addEventListener('submit', function (evt) {
      evt.preventDefault();
    });
    setEventListeners(formElement);
  });
};

enableValidation();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
